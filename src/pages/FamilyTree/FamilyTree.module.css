/* Biến chiều cao đường dọc giữa các tầng – giữ đồng bộ để KHÔNG bị hở */
:root {
  --branch-v: 34px; /* khoảng cách theo trục dọc giữa các tầng */
  --line: #111827; /* màu nét */
}

* {
  box-sizing: border-box;
}
ul,
li {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* ============== Khung tổng ============== */
.familyWrap {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background: #fff;
  color: #0f172a;
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto,
    Helvetica, Arial;
}
.ftToolbar {
  padding: 10px 14px;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
  gap: 12px;
}
.ftZoomLabel {
  font-weight: 700;
}
.arrows button {
  margin-right: 6px;
  height: 28px;
  min-width: 32px;
  border: 1px solid #cbd5e1;
  border-radius: 6px;
  background: #fff;
  cursor: pointer;
}

.treeWrap {
  position: relative;
  flex: 1 1 auto;
  overflow: auto;
  background: #fff;
}
.ftCanvas {
  position: relative;
  min-width: max(100%, 960px);
  padding: 48px 32px 88px;
  display: flex;
  justify-content: center;
}

/* ============== UL/LI tạo đường nối ============== */
.geneTree {
  width: max-content;
  margin: 0 auto;
}

/* Tầng con của một node (UL con của LI hiện tại) */
.geneTree ul {
  position: relative;
  padding-top: var(
    --branch-v
  ); /* đẩy cụm con xuống – nhường chỗ cho đường dọc */
}

/* Mỗi con là một <li> */
.geneTree li {
  float: left;
  position: relative;
  text-align: center;
  padding: var(--branch-v) 16px 0 16px; /* đẩy card xuống dưới khỏi đường NGANG */
}

/* --------- ĐƯỜNG NGANG (trường hợp ≥2 con) ---------
   Vẽ “hai nửa” đường ngang từ tâm tỏa ra hai phía để mọi li ghép thành 1 đường ngang chung */
.geneTree li::before,
.geneTree li::after {
  content: "";
  position: absolute;
  top: 0; /* đường ngang nằm trên cùng cụm con */
  width: 50%;
  height: 0;
  border-top: 2px solid var(--line);
}
.geneTree li::before {
  right: 50%;
}
.geneTree li::after {
  left: 50%;
}

/* Con đầu/Con cuối: bỏ nửa không cần để đường ngang bắt đầu/kết thúc đúng tại hai đầu */
.geneTree li:first-child::before {
  border-top: none;
}
.geneTree li:last-child::after {
  border-top: none;
}

/* --------- TRƯỜNG HỢP CHỈ 1 CON ---------
   Khi chỉ có 1 con: bỏ đường NGANG; vẫn giữ một đường DỌC duy nhất từ cha tới con */
.geneTree li:only-child::before,
.geneTree li:only-child::after {
  display: none; /* bỏ ngang */
}
.geneTree ul.onlyOne {
  /* UL chứa đúng 1 LI */
  padding-top: 0; /* không cần khoảng dọc cho đường ngang */
}

/* Đường DỌC rơi xuống từng node con – dùng pseudo của .couple ở con
   (đặt trên chính .couple của con để luôn chạm mép trên card con) */
.childCouple::before {
  content: "";
  position: absolute;
  top: calc(-1 * var(--branch-v)); /* bắt đầu ngay từ đường ngang phía trên */
  left: 50%;
  transform: translateX(-50%);
  width: 2px;
  height: var(--branch-v); /* đúng bằng khoảng cách tới mép trên card con */
  background: var(--line);
}

/* Với 1 con: cần một đường DỌC duy nhất nối trực tiếp cha ↔ con
   Tăng chiều dài đoạn dọc của con thêm 1 nhịp để chạm thẳng từ cha xuống con */
.onlyOne > li > .childCouple::before {
  height: calc(var(--branch-v) * 2); /* cha→(1 nhịp)→đầu UL + UL→con (1 nhịp) */
}

/* --------- ĐƯỜNG DỌC từ cụm cha xuống khu con ---------
   Chỉ vẽ 1 đường dọc trung tâm ở ngay dưới cụm cha.
   LƯU Ý: KHÔNG vẽ thêm ul::before để tránh bị “2 đường chồng nhau”. */
.couple.hasChildren::after {
  content: "";
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  bottom: calc(-1 * var(--branch-v));
  width: 2px;
  height: var(--branch-v); /* nối xuống tới mép trên của vùng con */
  background: var(--line);
}
/* Trường hợp chỉ 1 con: kéo dài thêm 1 nhịp để chạm thẳng mép trên card con */
.couple.hasOneChild::after {
  height: calc(var(--branch-v) * 2);
}

/* Clear float */
.geneTree ul::after,
.geneTree::after {
  content: "";
  display: block;
  clear: both;
}

/* ============== Cụm vợ chồng + Card ============== */
.couple {
  display: inline-flex;
  gap: 12px;
  align-items: flex-start;
  justify-content: center;
  position: relative;
}
.card {
  width: 180px;
  min-height: 82px;
  padding: 10px 12px;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 14px;
  display: grid;
  grid-template-rows: auto auto auto;
  row-gap: 6px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}
.name {
  font-weight: 700;
  font-size: 15px;
  color: #0f172a;
  text-align: left;
}
.role {
  font-size: 12px;
  color: #475569;
  text-align: left;
  min-height: 16px;
}
.view {
  justify-self: start;
  padding: 0 6px;
  height: 26px;
  font-size: 12px;
  border-radius: 8px;
  border: 1px solid #cbd5e1;
  background: #fff;
  cursor: pointer;
}

/* ============== Popup ============== */
.modalBackdrop {
  position: fixed;
  inset: 0;
  background: rgba(15, 23, 42, 0.35);
  display: grid;
  place-items: center;
  z-index: 50;
}
.modal {
  width: min(760px, 96vw);
  background: #fff;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
  overflow: hidden;
}
.modalHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 12px;
  border-bottom: 1px solid #e2e8f0;
}
.modalTitle {
  font-weight: 700;
}
.modalClose {
  border: 1px solid #cbd5e1;
  background: #fff;
  border-radius: 8px;
  width: 28px;
  height: 28px;
  cursor: pointer;
}
.modalBody {
  display: grid;
  grid-template-columns: 220px 1fr;
  gap: 12px;
  padding: 12px;
}
.modalAvatar {
  width: 220px;
  height: 220px;
  border: 1px solid #e5e7eb;
  display: grid;
  place-items: center;
  background: #f8fafc;
  border-radius: 8px;
}
.modalAvatar img {
  max-width: 100%;
  max-height: 100%;
  object-fit: cover;
  border-radius: 8px;
}
.noImage {
  color: #64748b;
  font-size: 14px;
}
.modalInfo > div {
  margin-bottom: 6px;
}
.modalFooter {
  padding: 10px 12px;
  border-top: 1px solid #e2e8f0;
  display: flex;
  justify-content: flex-end;
}
